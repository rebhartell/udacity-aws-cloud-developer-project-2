{
	"info": {
		"_postman_id": "40b4734a-73fe-4839-9d9c-a81451911f20",
		"name": "cloud-cdnd-c2-final",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/  -- shows usage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body(\"try GET /filteredimage?image_url={{URL}}\");",
							"});",
							"",
							"pm.test(\"Response time is less than 600ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(600);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{HOST}}/",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"path": [
						""
					]
				},
				"description": "Make call to base URL"
			},
			"response": []
		},
		{
			"name": "/BAD_API_CALL  -- any otherwise unhandled API call",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response is JSON error: \\\"Unsupported call\\\"\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.eql(\"Unsupported call\");",
							"});",
							"",
							"pm.test(\"Response time is less than 600ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(600);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{HOST}}/BAD_API_CALL",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"BAD_API_CALL"
					]
				},
				"description": "Unsupported API call"
			},
			"response": []
		},
		{
			"name": "/filteredimage?image_url={{IMAGE-URL}}    -- return filtered image",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is image/jpeg\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('image/jpeg');",
							"});",
							"",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{HOST}}/filteredimage?image_url={{IMAGE-URL}}",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"filteredimage"
					],
					"query": [
						{
							"key": "image_url",
							"value": "{{IMAGE-URL}}"
						}
					]
				},
				"description": "Request that the image at the given URL is returned after applying stock filters"
			},
			"response": []
		},
		{
			"name": "/filteredimage    -- bad request missing query parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Returned JSON error: \\\"Image URL query parameter is required\\\"\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.eql(\"Image URL query parameter is required\");",
							"});",
							"",
							"pm.test(\"Response time is less than 600ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(600);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{HOST}}/filteredimage",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"filteredimage"
					]
				},
				"description": "Request a filtered image but do not provide the image URL"
			},
			"response": []
		},
		{
			"name": "/filteredimage?image_url=MALFORMED-URL    -- malformed Image URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response JSON has error: \\\"Malformed Image URL\\\"\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.eql(\"Malformed Image URL\");",
							"});",
							"",
							"pm.test(\"Response time is less than 600ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(600);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{HOST}}/filteredimage?image_url=MALFORMED-URL",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"filteredimage"
					],
					"query": [
						{
							"key": "image_url",
							"value": "MALFORMED-URL"
						}
					]
				},
				"description": "Request a filtered image but provide a malformed URL for the image"
			},
			"response": []
		},
		{
			"name": "NOT IMPLEMENTED YET/filteredimage?image_url={{MISSING-IMAGE-URL}}    -- requested image not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"Response JSON has error: \\\"Unprocessable Entity - Image not found\\\"\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.error).to.eql(\"Unprocessable Entity - Image not found\");",
							"});",
							"",
							"pm.test(\"Response time is less than 600ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(600);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "NOT IMPLEMENTED YET http://{{HOST}}/filteredimage?image_url={{MISSING-IMAGE-URL}}",
					"protocol": "NOT IMPLEMENTED YET http",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"filteredimage"
					],
					"query": [
						{
							"key": "image_url",
							"value": "{{MISSING-IMAGE-URL}}"
						}
					]
				},
				"description": "Request a filtered image but provide a missing image URL."
			},
			"response": []
		},
		{
			"name": "{{IMAGE-URL}}    -- check that it exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is image/jpeg\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('image/jpeg');",
							"});",
							"",
							"pm.test(\"Response time is less than 2000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{IMAGE-URL}}",
					"host": [
						"{{IMAGE-URL}}"
					]
				},
				"description": "Get the target image directly to check that it exists"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "HOST",
			"value": "localhost:8082"
		},
		{
			"key": "IMAGE-URL",
			"value": "https://upload.wikimedia.org/wikipedia/commons/b/bd/Golden_tabby_and_white_kitten_n01.jpg"
		},
		{
			"key": "MISSING-IMAGE-URL",
			"value": "https://timedotcom.files.wordpress.com/2019/03/kitten-report.jpg"
		}
	]
}